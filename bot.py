from telethon import TelegramClient, events, Button
import os
import logging
from utils.file_processor import process_file
from database import init_db, set_export_format, get_export_format
from xlsx_exporter import create_xlsx_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = os.getenv('YOUR_API_ID')
api_hash = os.getenv('YOUR_API_HASH')
bot_token = os.getenv('BOT_TOKEN')

logger.info("API_ID: %s, API_HASH: %s, BOT_TOKEN: %s", api_id, api_hash, bot_token)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    logger.info("/start command received")
    await event.respond('–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ üìÑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.')
    raise events.StopPropagation

@client.on(events.NewMessage(pattern='/settings'))
async def settings(event):
    logger.info("/settings command received")
    buttons = [
        [Button.inline("–≠–∫—Å–ø–æ—Ä—Ç –≤ .txt üìÑ", b'txt')],
        [Button.inline("–≠–∫—Å–ø–æ—Ä—Ç –≤ .xlsx üìä", b'xlsx')]
    ]
    await event.respond('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:', buttons=buttons)
    raise events.StopPropagation

@client.on(events.CallbackQuery)
async def callback(event):
    user_id = event.sender_id
    data = event.data.decode('utf-8')
    logger.info("Callback received: %s", data)

    if data in ['txt', 'xlsx']:
        set_export_format(user_id, data)
        await event.respond(f'–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {data}.')
        await event.delete()

@client.on(events.NewMessage)
async def handle_file(event):
    logger.info("New message received")
    if event.message.file:
        file_path = await event.message.download_media()
        logger.info("File downloaded to: %s", file_path)
        if file_path.endswith('.xlsx'):
            try:
                user_id = event.sender_id
                export_format = get_export_format(user_id)
                processed_data = process_file(file_path)
                if export_format == 'txt':
                    txt_file_path = "AdposCards.txt"
                    with open(txt_file_path, 'w') as txt_file:
                        txt_file.write('\n'.join(processed_data))
                    await event.respond('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt üìÑ.')
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await client.send_file(event.chat_id, txt_file_path)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    message_text = '\n'.join([f'{i+1}. `{card}`' for i, card in enumerate(processed_data)])
                    await event.respond(message_text, parse_mode='markdown')
                elif export_format == 'xlsx':
                    xlsx_file_path = "AdposCards.processed.xlsx"
                    create_xlsx_file(processed_data, xlsx_file_path)
                    await event.respond('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx üìä.')
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await client.send_file(event.chat_id, xlsx_file_path)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    message_text = '\n'.join([f'{i+1}. `{card}`' for i, card in enumerate(processed_data)])
                    await event.respond(message_text, parse_mode='markdown')
            except Exception as e:
                logger.error("Error processing file: %s", e)
                await event.respond(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}')
        else:
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª.')

if __name__ == '__main__':
    logger.info("Starting bot...")
    client.run_until_disconnected()
