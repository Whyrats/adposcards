from telethon import TelegramClient, events, Button
import os
from utils.file_processor import process_file
from database import init_db, set_export_format, get_export_format
from xlsx_exporter import create_xlsx_file

api_id = os.getenv('YOUR_API_ID')
api_hash = os.getenv('YOUR_API_HASH')
bot_token = os.getenv('BOT_TOKEN')

print(f"API_ID: {api_id}, API_HASH: {api_hash}, BOT_TOKEN: {bot_token}")

client = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)

init_db()

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    print("/start command received")
    await event.respond('–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ üìÑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.')
    raise events.StopPropagation

@client.on(events.NewMessage(pattern='/settings'))
async def settings(event):
    print("/settings command received")
    buttons = [
        [Button.inline("–≠–∫—Å–ø–æ—Ä—Ç –≤ .txt üìÑ", b'txt')],
        [Button.inline("–≠–∫—Å–ø–æ—Ä—Ç –≤ .xlsx üìä", b'xlsx')]
    ]
    await event.respond('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:', buttons=buttons)
    raise events.StopPropagation

@client.on(events.CallbackQuery)
async def callback(event):
    user_id = event.sender_id
    data = event.data.decode('utf-8')
    print(f"Callback received: {data}")

    if data in ['txt', 'xlsx']:
        set_export_format(user_id, data)
        await event.respond(f'–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {data}.')
        await event.delete()

@client.on(events.NewMessage)
async def handle_file(event):
    print("New message received")
    if event.message.file:
        file_path = await event.message.download_media()
        if file_path.endswith('.xlsx'):
            try:
                user_id = event.sender_id
                export_format = get_export_format(user_id)
                results = process_file(file_path)
                print(f"Export format: {export_format}")

                if export_format == 'txt':
                    response = "\n".join([f"{index + 1}. `{result}` üìù" for index, result in enumerate(results)])
                    txt_file_path = 'AdposCards.txt'
                    with open(txt_file_path, 'w') as f:
                        for result in results:
                            f.write(f"{result}\n")

                    await event.respond(response, parse_mode='markdown')
                    await event.respond('–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ üìÑ:')
                    await event.respond(file=txt_file_path)
                    os.remove(txt_file_path)

                elif export_format == 'xlsx':
                    xlsx_file_path = 'AdposCards.xlsx'
                    create_xlsx_file(results, xlsx_file_path)
                    await event.respond('–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ üìä:')
                    await event.respond(file=xlsx_file_path)
                    os.remove(xlsx_file_path)

                os.remove(file_path)
            except Exception as e:
                await event.respond(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)} ‚ùå')
        else:
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx ‚ùó.')
    else:
        await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ üìÑ.')

def main():
    client.run_until_disconnected()

if __name__ == '__main__':
    main()
